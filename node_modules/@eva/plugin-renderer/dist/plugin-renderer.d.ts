import { Application } from '@eva/renderer-adapter';
import type { ApplicationOptions } from 'pixi.js';
import { ComponentChanged } from '@eva/eva.js';
import { Container } from '@eva/renderer-adapter';
import EventEmitter from 'eventemitter3';
import { Game } from '@eva/eva.js';
import { GameObject } from '@eva/eva.js';
import { LOAD_SCENE_MODE } from '@eva/eva.js';
import { PureObserverInfo } from '@eva/eva.js';
import { Scene } from '@eva/eva.js';
import { System } from '@eva/eva.js';
import { Transform } from '@eva/eva.js';
import { UpdateParams } from '@eva/eva.js';

export declare class ContainerManager {
    containerMap: {
        [propName: number]: Container;
    };
    addContainer({ name, container }: {
        name: number;
        container: Container;
    }): void;
    getContainer(name: number): Container;
    removeContainer(name: number): void;
    updateTransform({ name, transform }: {
        name: number;
        transform: Transform;
    }): void;
}

export declare class Renderer<T extends {} = {}> extends System<T> {
    name: string;
    game: Game;
    static observerInfo: PureObserverInfo;
    observerInfo: PureObserverInfo;
    containerManager: ContainerManager;
    rendererManager: RendererManager;
    constructor(params?: T);
    componentChanged(_changed: ComponentChanged): void;
    rendererUpdate(_gameObject: GameObject): void;
    update(e?: UpdateParams): void;
}

export declare enum RENDERER_TYPE {
    UNKNOWN = 0,
    WEBGL = 1,
    CANVAS = 2
}

export declare class RendererManager {
    game: Game;
    rendererSystem: RendererSystem;
    constructor({ game, rendererSystem }: {
        game: any;
        rendererSystem: any;
    });
    renderers: Renderer[];
    register(...renderers: Renderer[]): void;
    componentChanged(changes: ComponentChanged[]): void;
    update(gameObject: GameObject): void;
}

export declare class RendererSystem extends System<RendererSystemParams> {
    static systemName: string;
    params: RendererSystemParams;
    rendererManager: RendererManager;
    containerManager: ContainerManager;
    application: Application;
    game: Game;
    transform: Transform_2;
    multiApps: Application[];
    init(params: RendererSystemParams): void;
    registerObserver(observerInfo: any): void;
    createMultiApplication({ params }: {
        params: RendererSystemParams;
    }): Application;
    createApplication(params: RendererSystemParams): Application;
    update(): void;
    lateUpdate(e: any): void;
    onDestroy(): void;
    resize(width: any, height: any): void;
}

export declare interface RendererSystemParams extends ApplicationOptions {
    canvas?: HTMLCanvasElement;
    renderType?: number;
    preventScroll?: boolean;
    enableScroll?: boolean;
}

declare class Transform_2 extends EventEmitter {
    name: string;
    waitRemoveIds: number[];
    waitSceneId: number;
    system: RendererSystem;
    containerManager: ContainerManager;
    waitChangeScenes: {
        scene: Scene;
        mode: LOAD_SCENE_MODE;
        application: Application;
    }[];
    constructor({ system, containerManager }: {
        system: any;
        containerManager: any;
    });
    init(system: RendererSystem): void;
    update(): void;
    componentChanged(changed: ComponentChanged): void;
    addContainer(changed: ComponentChanged): void;
    change(changed: ComponentChanged): void;
    destroy(): void;
}

export { }
