import { Component } from '@eva/eva.js';
import { ComponentChanged } from '@eva/eva.js';
import { ContainerManager } from '@eva/plugin-renderer';
import type { GameObject } from '@eva/eva.js';
import { Renderer } from '@eva/plugin-renderer';
import { RendererManager } from '@eva/plugin-renderer';
import { RendererSystem } from '@eva/plugin-renderer';

declare class Event_2 extends Component<EventParams> {
    static componentName: string;
    hitArea: HitArea;
    init(params?: EventParams): void;
    emit(eventName: TouchEventName, ...args: [EventParam]): boolean;
    emit<T extends string>(eventName: Exclude<T, TouchEventName>, ...args: any[]): boolean;
    once(eventName: TouchEventName, fn: (arg: EventParam) => void, context?: any): this;
    once<T extends string>(eventName: Exclude<T, TouchEventName>, fn: (...args: any[]) => void, context?: any): this;
    on(eventName: TouchEventName, fn: (arg: EventParam) => void, context?: any): this;
    on<T extends string>(eventName: Exclude<T, TouchEventName>, fn: (...args: any[]) => void, context?: any): this;
}
export { Event_2 as Event }

declare type EventParam = {
    stopPropagation: () => void;
    data: {
        pointerId: number;
        position: {
            x: number;
            y: number;
        };
    };
    gameObject: GameObject;
};

export declare interface EventParams {
    hitArea: HitArea;
}

export declare class EventSystem extends Renderer<EventSystemParams> {
    static systemName: string;
    name: string;
    renderSystem: RendererSystem;
    rendererManager: RendererManager;
    containerManager: ContainerManager;
    init({ moveWhenInside }?: EventSystemParams): void;
    componentChanged(changed: ComponentChanged): void;
    add(changed: ComponentChanged): void;
    remove(changed: ComponentChanged): void;
    change(changed: ComponentChanged): void;
    addHitArea(changed: ComponentChanged, container: any, hitArea: any): void;
}

export declare interface EventSystemParams {
    moveWhenInside?: boolean;
}

export declare enum HIT_AREA_TYPE {
    Circle = "Circle",
    Ellipse = "Ellipse",
    Polygon = "Polygon",
    Rect = "Rect",
    RoundedRect = "RoundedRect"
}

declare interface HitArea {
    type: HIT_AREA_TYPE;
    style?: {
        x?: number;
        y?: number;
        radius?: number;
        width?: number;
        height?: number;
        paths?: number[];
    };
}

declare type TouchEventName = 'touchstart' | 'touchmove' | 'touchend' | 'tap' | 'touchendoutside' | 'touchcancel';

export { }
